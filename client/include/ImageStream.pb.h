// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ImageStream.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ImageStream_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ImageStream_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ImageStream_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ImageStream_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ImageStream_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_ImageStream_2eproto_metadata_getter(int index);
namespace CVServer {
class Chunk;
struct ChunkDefaultTypeInternal;
extern ChunkDefaultTypeInternal _Chunk_default_instance_;
class ImageMessage;
struct ImageMessageDefaultTypeInternal;
extern ImageMessageDefaultTypeInternal _ImageMessage_default_instance_;
class ImageStream;
struct ImageStreamDefaultTypeInternal;
extern ImageStreamDefaultTypeInternal _ImageStream_default_instance_;
}  // namespace CVServer
PROTOBUF_NAMESPACE_OPEN
template<> ::CVServer::Chunk* Arena::CreateMaybeMessage<::CVServer::Chunk>(Arena*);
template<> ::CVServer::ImageMessage* Arena::CreateMaybeMessage<::CVServer::ImageMessage>(Arena*);
template<> ::CVServer::ImageStream* Arena::CreateMaybeMessage<::CVServer::ImageStream>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace CVServer {

// ===================================================================

class ImageMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CVServer.ImageMessage) */ {
 public:
  inline ImageMessage() : ImageMessage(nullptr) {}
  virtual ~ImageMessage();
  explicit constexpr ImageMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ImageMessage(const ImageMessage& from);
  ImageMessage(ImageMessage&& from) noexcept
    : ImageMessage() {
    *this = ::std::move(from);
  }

  inline ImageMessage& operator=(const ImageMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImageMessage& operator=(ImageMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ImageMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const ImageMessage* internal_default_instance() {
    return reinterpret_cast<const ImageMessage*>(
               &_ImageMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ImageMessage& a, ImageMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(ImageMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImageMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ImageMessage* New() const final {
    return CreateMaybeMessage<ImageMessage>(nullptr);
  }

  ImageMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ImageMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ImageMessage& from);
  void MergeFrom(const ImageMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImageMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CVServer.ImageMessage";
  }
  protected:
  explicit ImageMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_ImageStream_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 1,
    kRowFieldNumber = 2,
    kColumFieldNumber = 3,
    kTypeFieldNumber = 4,
    kChannelFieldNumber = 5,
  };
  // string Command = 1;
  void clear_command();
  const std::string& command() const;
  void set_command(const std::string& value);
  void set_command(std::string&& value);
  void set_command(const char* value);
  void set_command(const char* value, size_t size);
  std::string* mutable_command();
  std::string* release_command();
  void set_allocated_command(std::string* command);
  private:
  const std::string& _internal_command() const;
  void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // int32 row = 2;
  void clear_row();
  ::PROTOBUF_NAMESPACE_ID::int32 row() const;
  void set_row(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_row() const;
  void _internal_set_row(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 colum = 3;
  void clear_colum();
  ::PROTOBUF_NAMESPACE_ID::int32 colum() const;
  void set_colum(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_colum() const;
  void _internal_set_colum(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 type = 4;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 channel = 5;
  void clear_channel();
  ::PROTOBUF_NAMESPACE_ID::int32 channel() const;
  void set_channel(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_channel() const;
  void _internal_set_channel(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:CVServer.ImageMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
  ::PROTOBUF_NAMESPACE_ID::int32 row_;
  ::PROTOBUF_NAMESPACE_ID::int32 colum_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  ::PROTOBUF_NAMESPACE_ID::int32 channel_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ImageStream_2eproto;
};
// -------------------------------------------------------------------

class Chunk PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CVServer.Chunk) */ {
 public:
  inline Chunk() : Chunk(nullptr) {}
  virtual ~Chunk();
  explicit constexpr Chunk(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Chunk(const Chunk& from);
  Chunk(Chunk&& from) noexcept
    : Chunk() {
    *this = ::std::move(from);
  }

  inline Chunk& operator=(const Chunk& from) {
    CopyFrom(from);
    return *this;
  }
  inline Chunk& operator=(Chunk&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Chunk& default_instance() {
    return *internal_default_instance();
  }
  static inline const Chunk* internal_default_instance() {
    return reinterpret_cast<const Chunk*>(
               &_Chunk_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Chunk& a, Chunk& b) {
    a.Swap(&b);
  }
  inline void Swap(Chunk* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Chunk* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Chunk* New() const final {
    return CreateMaybeMessage<Chunk>(nullptr);
  }

  Chunk* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Chunk>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Chunk& from);
  void MergeFrom(const Chunk& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Chunk* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CVServer.Chunk";
  }
  protected:
  explicit Chunk(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_ImageStream_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPicData0FieldNumber = 1,
    kPicData1FieldNumber = 2,
    kPicData2FieldNumber = 3,
    kPicData3FieldNumber = 4,
  };
  // int32 pic_data0 = 1;
  void clear_pic_data0();
  ::PROTOBUF_NAMESPACE_ID::int32 pic_data0() const;
  void set_pic_data0(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_pic_data0() const;
  void _internal_set_pic_data0(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 pic_data1 = 2;
  void clear_pic_data1();
  ::PROTOBUF_NAMESPACE_ID::int32 pic_data1() const;
  void set_pic_data1(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_pic_data1() const;
  void _internal_set_pic_data1(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 pic_data2 = 3;
  void clear_pic_data2();
  ::PROTOBUF_NAMESPACE_ID::int32 pic_data2() const;
  void set_pic_data2(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_pic_data2() const;
  void _internal_set_pic_data2(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 pic_data3 = 4;
  void clear_pic_data3();
  ::PROTOBUF_NAMESPACE_ID::int32 pic_data3() const;
  void set_pic_data3(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_pic_data3() const;
  void _internal_set_pic_data3(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:CVServer.Chunk)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 pic_data0_;
  ::PROTOBUF_NAMESPACE_ID::int32 pic_data1_;
  ::PROTOBUF_NAMESPACE_ID::int32 pic_data2_;
  ::PROTOBUF_NAMESPACE_ID::int32 pic_data3_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ImageStream_2eproto;
};
// -------------------------------------------------------------------

class ImageStream PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CVServer.ImageStream) */ {
 public:
  inline ImageStream() : ImageStream(nullptr) {}
  virtual ~ImageStream();
  explicit constexpr ImageStream(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ImageStream(const ImageStream& from);
  ImageStream(ImageStream&& from) noexcept
    : ImageStream() {
    *this = ::std::move(from);
  }

  inline ImageStream& operator=(const ImageStream& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImageStream& operator=(ImageStream&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ImageStream& default_instance() {
    return *internal_default_instance();
  }
  static inline const ImageStream* internal_default_instance() {
    return reinterpret_cast<const ImageStream*>(
               &_ImageStream_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ImageStream& a, ImageStream& b) {
    a.Swap(&b);
  }
  inline void Swap(ImageStream* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImageStream* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ImageStream* New() const final {
    return CreateMaybeMessage<ImageStream>(nullptr);
  }

  ImageStream* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ImageStream>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ImageStream& from);
  void MergeFrom(const ImageStream& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImageStream* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CVServer.ImageStream";
  }
  protected:
  explicit ImageStream(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_ImageStream_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLineDataFieldNumber = 1,
    kImgDataFieldNumber = 2,
  };
  // repeated .CVServer.Chunk LineData = 1;
  int linedata_size() const;
  private:
  int _internal_linedata_size() const;
  public:
  void clear_linedata();
  ::CVServer::Chunk* mutable_linedata(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CVServer::Chunk >*
      mutable_linedata();
  private:
  const ::CVServer::Chunk& _internal_linedata(int index) const;
  ::CVServer::Chunk* _internal_add_linedata();
  public:
  const ::CVServer::Chunk& linedata(int index) const;
  ::CVServer::Chunk* add_linedata();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CVServer::Chunk >&
      linedata() const;

  // .CVServer.ImageMessage ImgData = 2;
  bool has_imgdata() const;
  private:
  bool _internal_has_imgdata() const;
  public:
  void clear_imgdata();
  const ::CVServer::ImageMessage& imgdata() const;
  ::CVServer::ImageMessage* release_imgdata();
  ::CVServer::ImageMessage* mutable_imgdata();
  void set_allocated_imgdata(::CVServer::ImageMessage* imgdata);
  private:
  const ::CVServer::ImageMessage& _internal_imgdata() const;
  ::CVServer::ImageMessage* _internal_mutable_imgdata();
  public:
  void unsafe_arena_set_allocated_imgdata(
      ::CVServer::ImageMessage* imgdata);
  ::CVServer::ImageMessage* unsafe_arena_release_imgdata();

  // @@protoc_insertion_point(class_scope:CVServer.ImageStream)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CVServer::Chunk > linedata_;
  ::CVServer::ImageMessage* imgdata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ImageStream_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ImageMessage

// string Command = 1;
inline void ImageMessage::clear_command() {
  command_.ClearToEmpty();
}
inline const std::string& ImageMessage::command() const {
  // @@protoc_insertion_point(field_get:CVServer.ImageMessage.Command)
  return _internal_command();
}
inline void ImageMessage::set_command(const std::string& value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:CVServer.ImageMessage.Command)
}
inline std::string* ImageMessage::mutable_command() {
  // @@protoc_insertion_point(field_mutable:CVServer.ImageMessage.Command)
  return _internal_mutable_command();
}
inline const std::string& ImageMessage::_internal_command() const {
  return command_.Get();
}
inline void ImageMessage::_internal_set_command(const std::string& value) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ImageMessage::set_command(std::string&& value) {
  
  command_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CVServer.ImageMessage.Command)
}
inline void ImageMessage::set_command(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CVServer.ImageMessage.Command)
}
inline void ImageMessage::set_command(const char* value,
    size_t size) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CVServer.ImageMessage.Command)
}
inline std::string* ImageMessage::_internal_mutable_command() {
  
  return command_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ImageMessage::release_command() {
  // @@protoc_insertion_point(field_release:CVServer.ImageMessage.Command)
  return command_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ImageMessage::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    
  } else {
    
  }
  command_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CVServer.ImageMessage.Command)
}

// int32 row = 2;
inline void ImageMessage::clear_row() {
  row_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImageMessage::_internal_row() const {
  return row_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImageMessage::row() const {
  // @@protoc_insertion_point(field_get:CVServer.ImageMessage.row)
  return _internal_row();
}
inline void ImageMessage::_internal_set_row(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  row_ = value;
}
inline void ImageMessage::set_row(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_row(value);
  // @@protoc_insertion_point(field_set:CVServer.ImageMessage.row)
}

// int32 colum = 3;
inline void ImageMessage::clear_colum() {
  colum_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImageMessage::_internal_colum() const {
  return colum_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImageMessage::colum() const {
  // @@protoc_insertion_point(field_get:CVServer.ImageMessage.colum)
  return _internal_colum();
}
inline void ImageMessage::_internal_set_colum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  colum_ = value;
}
inline void ImageMessage::set_colum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_colum(value);
  // @@protoc_insertion_point(field_set:CVServer.ImageMessage.colum)
}

// int32 type = 4;
inline void ImageMessage::clear_type() {
  type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImageMessage::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImageMessage::type() const {
  // @@protoc_insertion_point(field_get:CVServer.ImageMessage.type)
  return _internal_type();
}
inline void ImageMessage::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_ = value;
}
inline void ImageMessage::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:CVServer.ImageMessage.type)
}

// int32 channel = 5;
inline void ImageMessage::clear_channel() {
  channel_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImageMessage::_internal_channel() const {
  return channel_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImageMessage::channel() const {
  // @@protoc_insertion_point(field_get:CVServer.ImageMessage.channel)
  return _internal_channel();
}
inline void ImageMessage::_internal_set_channel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  channel_ = value;
}
inline void ImageMessage::set_channel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_channel(value);
  // @@protoc_insertion_point(field_set:CVServer.ImageMessage.channel)
}

// -------------------------------------------------------------------

// Chunk

// int32 pic_data0 = 1;
inline void Chunk::clear_pic_data0() {
  pic_data0_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Chunk::_internal_pic_data0() const {
  return pic_data0_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Chunk::pic_data0() const {
  // @@protoc_insertion_point(field_get:CVServer.Chunk.pic_data0)
  return _internal_pic_data0();
}
inline void Chunk::_internal_set_pic_data0(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  pic_data0_ = value;
}
inline void Chunk::set_pic_data0(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_pic_data0(value);
  // @@protoc_insertion_point(field_set:CVServer.Chunk.pic_data0)
}

// int32 pic_data1 = 2;
inline void Chunk::clear_pic_data1() {
  pic_data1_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Chunk::_internal_pic_data1() const {
  return pic_data1_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Chunk::pic_data1() const {
  // @@protoc_insertion_point(field_get:CVServer.Chunk.pic_data1)
  return _internal_pic_data1();
}
inline void Chunk::_internal_set_pic_data1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  pic_data1_ = value;
}
inline void Chunk::set_pic_data1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_pic_data1(value);
  // @@protoc_insertion_point(field_set:CVServer.Chunk.pic_data1)
}

// int32 pic_data2 = 3;
inline void Chunk::clear_pic_data2() {
  pic_data2_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Chunk::_internal_pic_data2() const {
  return pic_data2_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Chunk::pic_data2() const {
  // @@protoc_insertion_point(field_get:CVServer.Chunk.pic_data2)
  return _internal_pic_data2();
}
inline void Chunk::_internal_set_pic_data2(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  pic_data2_ = value;
}
inline void Chunk::set_pic_data2(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_pic_data2(value);
  // @@protoc_insertion_point(field_set:CVServer.Chunk.pic_data2)
}

// int32 pic_data3 = 4;
inline void Chunk::clear_pic_data3() {
  pic_data3_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Chunk::_internal_pic_data3() const {
  return pic_data3_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Chunk::pic_data3() const {
  // @@protoc_insertion_point(field_get:CVServer.Chunk.pic_data3)
  return _internal_pic_data3();
}
inline void Chunk::_internal_set_pic_data3(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  pic_data3_ = value;
}
inline void Chunk::set_pic_data3(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_pic_data3(value);
  // @@protoc_insertion_point(field_set:CVServer.Chunk.pic_data3)
}

// -------------------------------------------------------------------

// ImageStream

// repeated .CVServer.Chunk LineData = 1;
inline int ImageStream::_internal_linedata_size() const {
  return linedata_.size();
}
inline int ImageStream::linedata_size() const {
  return _internal_linedata_size();
}
inline void ImageStream::clear_linedata() {
  linedata_.Clear();
}
inline ::CVServer::Chunk* ImageStream::mutable_linedata(int index) {
  // @@protoc_insertion_point(field_mutable:CVServer.ImageStream.LineData)
  return linedata_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CVServer::Chunk >*
ImageStream::mutable_linedata() {
  // @@protoc_insertion_point(field_mutable_list:CVServer.ImageStream.LineData)
  return &linedata_;
}
inline const ::CVServer::Chunk& ImageStream::_internal_linedata(int index) const {
  return linedata_.Get(index);
}
inline const ::CVServer::Chunk& ImageStream::linedata(int index) const {
  // @@protoc_insertion_point(field_get:CVServer.ImageStream.LineData)
  return _internal_linedata(index);
}
inline ::CVServer::Chunk* ImageStream::_internal_add_linedata() {
  return linedata_.Add();
}
inline ::CVServer::Chunk* ImageStream::add_linedata() {
  // @@protoc_insertion_point(field_add:CVServer.ImageStream.LineData)
  return _internal_add_linedata();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CVServer::Chunk >&
ImageStream::linedata() const {
  // @@protoc_insertion_point(field_list:CVServer.ImageStream.LineData)
  return linedata_;
}

// .CVServer.ImageMessage ImgData = 2;
inline bool ImageStream::_internal_has_imgdata() const {
  return this != internal_default_instance() && imgdata_ != nullptr;
}
inline bool ImageStream::has_imgdata() const {
  return _internal_has_imgdata();
}
inline void ImageStream::clear_imgdata() {
  if (GetArena() == nullptr && imgdata_ != nullptr) {
    delete imgdata_;
  }
  imgdata_ = nullptr;
}
inline const ::CVServer::ImageMessage& ImageStream::_internal_imgdata() const {
  const ::CVServer::ImageMessage* p = imgdata_;
  return p != nullptr ? *p : reinterpret_cast<const ::CVServer::ImageMessage&>(
      ::CVServer::_ImageMessage_default_instance_);
}
inline const ::CVServer::ImageMessage& ImageStream::imgdata() const {
  // @@protoc_insertion_point(field_get:CVServer.ImageStream.ImgData)
  return _internal_imgdata();
}
inline void ImageStream::unsafe_arena_set_allocated_imgdata(
    ::CVServer::ImageMessage* imgdata) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(imgdata_);
  }
  imgdata_ = imgdata;
  if (imgdata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CVServer.ImageStream.ImgData)
}
inline ::CVServer::ImageMessage* ImageStream::release_imgdata() {
  
  ::CVServer::ImageMessage* temp = imgdata_;
  imgdata_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CVServer::ImageMessage* ImageStream::unsafe_arena_release_imgdata() {
  // @@protoc_insertion_point(field_release:CVServer.ImageStream.ImgData)
  
  ::CVServer::ImageMessage* temp = imgdata_;
  imgdata_ = nullptr;
  return temp;
}
inline ::CVServer::ImageMessage* ImageStream::_internal_mutable_imgdata() {
  
  if (imgdata_ == nullptr) {
    auto* p = CreateMaybeMessage<::CVServer::ImageMessage>(GetArena());
    imgdata_ = p;
  }
  return imgdata_;
}
inline ::CVServer::ImageMessage* ImageStream::mutable_imgdata() {
  // @@protoc_insertion_point(field_mutable:CVServer.ImageStream.ImgData)
  return _internal_mutable_imgdata();
}
inline void ImageStream::set_allocated_imgdata(::CVServer::ImageMessage* imgdata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete imgdata_;
  }
  if (imgdata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(imgdata);
    if (message_arena != submessage_arena) {
      imgdata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, imgdata, submessage_arena);
    }
    
  } else {
    
  }
  imgdata_ = imgdata;
  // @@protoc_insertion_point(field_set_allocated:CVServer.ImageStream.ImgData)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace CVServer

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ImageStream_2eproto
