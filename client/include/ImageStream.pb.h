// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ImageStream.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ImageStream_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ImageStream_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ImageStream_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ImageStream_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ImageStream_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_ImageStream_2eproto_metadata_getter(int index);
namespace CVServer {
class ImageMessage;
struct ImageMessageDefaultTypeInternal;
extern ImageMessageDefaultTypeInternal _ImageMessage_default_instance_;
}  // namespace CVServer
PROTOBUF_NAMESPACE_OPEN
template<> ::CVServer::ImageMessage* Arena::CreateMaybeMessage<::CVServer::ImageMessage>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace CVServer {

// ===================================================================

class ImageMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CVServer.ImageMessage) */ {
 public:
  inline ImageMessage() : ImageMessage(nullptr) {}
  virtual ~ImageMessage();
  explicit constexpr ImageMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ImageMessage(const ImageMessage& from);
  ImageMessage(ImageMessage&& from) noexcept
    : ImageMessage() {
    *this = ::std::move(from);
  }

  inline ImageMessage& operator=(const ImageMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImageMessage& operator=(ImageMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ImageMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const ImageMessage* internal_default_instance() {
    return reinterpret_cast<const ImageMessage*>(
               &_ImageMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ImageMessage& a, ImageMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(ImageMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImageMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ImageMessage* New() const final {
    return CreateMaybeMessage<ImageMessage>(nullptr);
  }

  ImageMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ImageMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ImageMessage& from);
  void MergeFrom(const ImageMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImageMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CVServer.ImageMessage";
  }
  protected:
  explicit ImageMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_ImageStream_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImageStreamFieldNumber = 2,
    kCommandFieldNumber = 1,
    kRowFieldNumber = 3,
    kColumFieldNumber = 4,
    kStateFieldNumber = 5,
  };
  // repeated bytes ImageStream = 2;
  int imagestream_size() const;
  private:
  int _internal_imagestream_size() const;
  public:
  void clear_imagestream();
  const std::string& imagestream(int index) const;
  std::string* mutable_imagestream(int index);
  void set_imagestream(int index, const std::string& value);
  void set_imagestream(int index, std::string&& value);
  void set_imagestream(int index, const char* value);
  void set_imagestream(int index, const void* value, size_t size);
  std::string* add_imagestream();
  void add_imagestream(const std::string& value);
  void add_imagestream(std::string&& value);
  void add_imagestream(const char* value);
  void add_imagestream(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& imagestream() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_imagestream();
  private:
  const std::string& _internal_imagestream(int index) const;
  std::string* _internal_add_imagestream();
  public:

  // string Command = 1;
  void clear_command();
  const std::string& command() const;
  void set_command(const std::string& value);
  void set_command(std::string&& value);
  void set_command(const char* value);
  void set_command(const char* value, size_t size);
  std::string* mutable_command();
  std::string* release_command();
  void set_allocated_command(std::string* command);
  private:
  const std::string& _internal_command() const;
  void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // int64 row = 3;
  void clear_row();
  ::PROTOBUF_NAMESPACE_ID::int64 row() const;
  void set_row(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_row() const;
  void _internal_set_row(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 colum = 4;
  void clear_colum();
  ::PROTOBUF_NAMESPACE_ID::int64 colum() const;
  void set_colum(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_colum() const;
  void _internal_set_colum(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 State = 5;
  void clear_state();
  ::PROTOBUF_NAMESPACE_ID::int64 state() const;
  void set_state(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_state() const;
  void _internal_set_state(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:CVServer.ImageMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> imagestream_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
  ::PROTOBUF_NAMESPACE_ID::int64 row_;
  ::PROTOBUF_NAMESPACE_ID::int64 colum_;
  ::PROTOBUF_NAMESPACE_ID::int64 state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ImageStream_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ImageMessage

// string Command = 1;
inline void ImageMessage::clear_command() {
  command_.ClearToEmpty();
}
inline const std::string& ImageMessage::command() const {
  // @@protoc_insertion_point(field_get:CVServer.ImageMessage.Command)
  return _internal_command();
}
inline void ImageMessage::set_command(const std::string& value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:CVServer.ImageMessage.Command)
}
inline std::string* ImageMessage::mutable_command() {
  // @@protoc_insertion_point(field_mutable:CVServer.ImageMessage.Command)
  return _internal_mutable_command();
}
inline const std::string& ImageMessage::_internal_command() const {
  return command_.Get();
}
inline void ImageMessage::_internal_set_command(const std::string& value) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ImageMessage::set_command(std::string&& value) {
  
  command_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CVServer.ImageMessage.Command)
}
inline void ImageMessage::set_command(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CVServer.ImageMessage.Command)
}
inline void ImageMessage::set_command(const char* value,
    size_t size) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CVServer.ImageMessage.Command)
}
inline std::string* ImageMessage::_internal_mutable_command() {
  
  return command_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ImageMessage::release_command() {
  // @@protoc_insertion_point(field_release:CVServer.ImageMessage.Command)
  return command_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ImageMessage::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    
  } else {
    
  }
  command_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CVServer.ImageMessage.Command)
}

// repeated bytes ImageStream = 2;
inline int ImageMessage::_internal_imagestream_size() const {
  return imagestream_.size();
}
inline int ImageMessage::imagestream_size() const {
  return _internal_imagestream_size();
}
inline void ImageMessage::clear_imagestream() {
  imagestream_.Clear();
}
inline std::string* ImageMessage::add_imagestream() {
  // @@protoc_insertion_point(field_add_mutable:CVServer.ImageMessage.ImageStream)
  return _internal_add_imagestream();
}
inline const std::string& ImageMessage::_internal_imagestream(int index) const {
  return imagestream_.Get(index);
}
inline const std::string& ImageMessage::imagestream(int index) const {
  // @@protoc_insertion_point(field_get:CVServer.ImageMessage.ImageStream)
  return _internal_imagestream(index);
}
inline std::string* ImageMessage::mutable_imagestream(int index) {
  // @@protoc_insertion_point(field_mutable:CVServer.ImageMessage.ImageStream)
  return imagestream_.Mutable(index);
}
inline void ImageMessage::set_imagestream(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:CVServer.ImageMessage.ImageStream)
  imagestream_.Mutable(index)->assign(value);
}
inline void ImageMessage::set_imagestream(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:CVServer.ImageMessage.ImageStream)
  imagestream_.Mutable(index)->assign(std::move(value));
}
inline void ImageMessage::set_imagestream(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  imagestream_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:CVServer.ImageMessage.ImageStream)
}
inline void ImageMessage::set_imagestream(int index, const void* value, size_t size) {
  imagestream_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CVServer.ImageMessage.ImageStream)
}
inline std::string* ImageMessage::_internal_add_imagestream() {
  return imagestream_.Add();
}
inline void ImageMessage::add_imagestream(const std::string& value) {
  imagestream_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:CVServer.ImageMessage.ImageStream)
}
inline void ImageMessage::add_imagestream(std::string&& value) {
  imagestream_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:CVServer.ImageMessage.ImageStream)
}
inline void ImageMessage::add_imagestream(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  imagestream_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:CVServer.ImageMessage.ImageStream)
}
inline void ImageMessage::add_imagestream(const void* value, size_t size) {
  imagestream_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:CVServer.ImageMessage.ImageStream)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ImageMessage::imagestream() const {
  // @@protoc_insertion_point(field_list:CVServer.ImageMessage.ImageStream)
  return imagestream_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ImageMessage::mutable_imagestream() {
  // @@protoc_insertion_point(field_mutable_list:CVServer.ImageMessage.ImageStream)
  return &imagestream_;
}

// int64 row = 3;
inline void ImageMessage::clear_row() {
  row_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ImageMessage::_internal_row() const {
  return row_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ImageMessage::row() const {
  // @@protoc_insertion_point(field_get:CVServer.ImageMessage.row)
  return _internal_row();
}
inline void ImageMessage::_internal_set_row(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  row_ = value;
}
inline void ImageMessage::set_row(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_row(value);
  // @@protoc_insertion_point(field_set:CVServer.ImageMessage.row)
}

// int64 colum = 4;
inline void ImageMessage::clear_colum() {
  colum_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ImageMessage::_internal_colum() const {
  return colum_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ImageMessage::colum() const {
  // @@protoc_insertion_point(field_get:CVServer.ImageMessage.colum)
  return _internal_colum();
}
inline void ImageMessage::_internal_set_colum(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  colum_ = value;
}
inline void ImageMessage::set_colum(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_colum(value);
  // @@protoc_insertion_point(field_set:CVServer.ImageMessage.colum)
}

// int64 State = 5;
inline void ImageMessage::clear_state() {
  state_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ImageMessage::_internal_state() const {
  return state_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ImageMessage::state() const {
  // @@protoc_insertion_point(field_get:CVServer.ImageMessage.State)
  return _internal_state();
}
inline void ImageMessage::_internal_set_state(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  state_ = value;
}
inline void ImageMessage::set_state(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:CVServer.ImageMessage.State)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace CVServer

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ImageStream_2eproto
