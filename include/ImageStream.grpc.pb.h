// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: ImageStream.proto
// Original file comments:
// Copyright 2015 gRPC authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#ifndef GRPC_ImageStream_2eproto__INCLUDED
#define GRPC_ImageStream_2eproto__INCLUDED

#include "ImageStream.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace CVServer {

// Interface exported by the server.
class CVServer final {
 public:
  static constexpr char const* service_full_name() {
    return "CVServer.CVServer";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // A server-to-client streaming RPC.
    //
    // Obtains the Features available within the given Rectangle.  Results are
    // streamed rather than returned at once (e.g. in a response message with a
    // repeated field), as the rectangle may cover a large area and contain a
    // huge number of features.
    // rpc ListFeatures(Rectangle) returns (stream Feature) {}
    //
    // A client-to-server streaming RPC.
    //
    // Accepts a stream of Points on a route being traversed, returning a
    // RouteSummary when traversal is completed.
    // rpc RecordRoute(stream Point) returns (RouteSummary) {}
    //
    // A Bidirectional streaming RPC.
    //
    // Accepts a stream of RouteNotes sent while a route is being traversed,
    // while receiving other RouteNotes (e.g. from other users).
    // rpc RouteChat(stream RouteNote) returns (stream RouteNote) {}
    //
    // 初步设想：图片传输、大文件传输
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::CVServer::ImageMessage, ::CVServer::ImageMessage>> CVImageStream(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::CVServer::ImageMessage, ::CVServer::ImageMessage>>(CVImageStreamRaw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::CVServer::ImageMessage, ::CVServer::ImageMessage>> AsyncCVImageStream(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::CVServer::ImageMessage, ::CVServer::ImageMessage>>(AsyncCVImageStreamRaw(context, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::CVServer::ImageMessage, ::CVServer::ImageMessage>> PrepareAsyncCVImageStream(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::CVServer::ImageMessage, ::CVServer::ImageMessage>>(PrepareAsyncCVImageStreamRaw(context, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // A server-to-client streaming RPC.
      //
      // Obtains the Features available within the given Rectangle.  Results are
      // streamed rather than returned at once (e.g. in a response message with a
      // repeated field), as the rectangle may cover a large area and contain a
      // huge number of features.
      // rpc ListFeatures(Rectangle) returns (stream Feature) {}
      //
      // A client-to-server streaming RPC.
      //
      // Accepts a stream of Points on a route being traversed, returning a
      // RouteSummary when traversal is completed.
      // rpc RecordRoute(stream Point) returns (RouteSummary) {}
      //
      // A Bidirectional streaming RPC.
      //
      // Accepts a stream of RouteNotes sent while a route is being traversed,
      // while receiving other RouteNotes (e.g. from other users).
      // rpc RouteChat(stream RouteNote) returns (stream RouteNote) {}
      //
      // 初步设想：图片传输、大文件传输
      virtual void CVImageStream(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::CVServer::ImageMessage,::CVServer::ImageMessage>* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
  private:
    virtual ::grpc::ClientReaderWriterInterface< ::CVServer::ImageMessage, ::CVServer::ImageMessage>* CVImageStreamRaw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::CVServer::ImageMessage, ::CVServer::ImageMessage>* AsyncCVImageStreamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::CVServer::ImageMessage, ::CVServer::ImageMessage>* PrepareAsyncCVImageStreamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    std::unique_ptr< ::grpc::ClientReaderWriter< ::CVServer::ImageMessage, ::CVServer::ImageMessage>> CVImageStream(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::CVServer::ImageMessage, ::CVServer::ImageMessage>>(CVImageStreamRaw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::CVServer::ImageMessage, ::CVServer::ImageMessage>> AsyncCVImageStream(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::CVServer::ImageMessage, ::CVServer::ImageMessage>>(AsyncCVImageStreamRaw(context, cq, tag));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::CVServer::ImageMessage, ::CVServer::ImageMessage>> PrepareAsyncCVImageStream(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::CVServer::ImageMessage, ::CVServer::ImageMessage>>(PrepareAsyncCVImageStreamRaw(context, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void CVImageStream(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::CVServer::ImageMessage,::CVServer::ImageMessage>* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientReaderWriter< ::CVServer::ImageMessage, ::CVServer::ImageMessage>* CVImageStreamRaw(::grpc::ClientContext* context) override;
    ::grpc::ClientAsyncReaderWriter< ::CVServer::ImageMessage, ::CVServer::ImageMessage>* AsyncCVImageStreamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReaderWriter< ::CVServer::ImageMessage, ::CVServer::ImageMessage>* PrepareAsyncCVImageStreamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_CVImageStream_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // A server-to-client streaming RPC.
    //
    // Obtains the Features available within the given Rectangle.  Results are
    // streamed rather than returned at once (e.g. in a response message with a
    // repeated field), as the rectangle may cover a large area and contain a
    // huge number of features.
    // rpc ListFeatures(Rectangle) returns (stream Feature) {}
    //
    // A client-to-server streaming RPC.
    //
    // Accepts a stream of Points on a route being traversed, returning a
    // RouteSummary when traversal is completed.
    // rpc RecordRoute(stream Point) returns (RouteSummary) {}
    //
    // A Bidirectional streaming RPC.
    //
    // Accepts a stream of RouteNotes sent while a route is being traversed,
    // while receiving other RouteNotes (e.g. from other users).
    // rpc RouteChat(stream RouteNote) returns (stream RouteNote) {}
    //
    // 初步设想：图片传输、大文件传输
    virtual ::grpc::Status CVImageStream(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::CVServer::ImageMessage, ::CVServer::ImageMessage>* stream);
  };
  template <class BaseClass>
  class WithAsyncMethod_CVImageStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CVImageStream() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_CVImageStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CVImageStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::CVServer::ImageMessage, ::CVServer::ImageMessage>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCVImageStream(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::CVServer::ImageMessage, ::CVServer::ImageMessage>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(0, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_CVImageStream<Service > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_CVImageStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CVImageStream() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackBidiHandler< ::CVServer::ImageMessage, ::CVServer::ImageMessage>(
            [this](
                   ::grpc::CallbackServerContext* context) { return this->CVImageStream(context); }));
    }
    ~WithCallbackMethod_CVImageStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CVImageStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::CVServer::ImageMessage, ::CVServer::ImageMessage>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerBidiReactor< ::CVServer::ImageMessage, ::CVServer::ImageMessage>* CVImageStream(
      ::grpc::CallbackServerContext* /*context*/)
      { return nullptr; }
  };
  typedef WithCallbackMethod_CVImageStream<Service > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_CVImageStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CVImageStream() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_CVImageStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CVImageStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::CVServer::ImageMessage, ::CVServer::ImageMessage>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_CVImageStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CVImageStream() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_CVImageStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CVImageStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::CVServer::ImageMessage, ::CVServer::ImageMessage>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCVImageStream(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(0, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CVImageStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CVImageStream() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackBidiHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context) { return this->CVImageStream(context); }));
    }
    ~WithRawCallbackMethod_CVImageStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CVImageStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::CVServer::ImageMessage, ::CVServer::ImageMessage>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* CVImageStream(
      ::grpc::CallbackServerContext* /*context*/)
      { return nullptr; }
  };
  typedef Service StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef Service StreamedService;
};
// A simple RPC.
//
// Obtains the feature at a given position.
//
// A feature with an empty name is returned if there's no feature at the given
// position.
// rpc GetFeature(Point) returns (Feature) {}

}  // namespace CVServer


#endif  // GRPC_ImageStream_2eproto__INCLUDED
