// Copyright 2015 gRPC authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

option java_multiple_files = true;
option java_package = "io.grpc.examples.gate";
option java_outer_classname = "GateProto";
option objc_class_prefix = "RTG";

package CVServer;

// Interface exported by the server.
service CVServer {
  // A simple RPC.
  //
  // Obtains the feature at a given position.
  //
  // A feature with an empty name is returned if there's no feature at the given
  // position.
  //rpc GetFeature(Point) returns (Feature) {}

  // A server-to-client streaming RPC.
  //
  // Obtains the Features available within the given Rectangle.  Results are
  // streamed rather than returned at once (e.g. in a response message with a
  // repeated field), as the rectangle may cover a large area and contain a
  // huge number of features.
  //rpc ListFeatures(Rectangle) returns (stream Feature) {}

  // A client-to-server streaming RPC.
  //
  // Accepts a stream of Points on a route being traversed, returning a
  // RouteSummary when traversal is completed.
  //rpc RecordRoute(stream Point) returns (RouteSummary) {}

  // A Bidirectional streaming RPC.
  //
  // Accepts a stream of RouteNotes sent while a route is being traversed,
  // while receiving other RouteNotes (e.g. from other users).
  //rpc RouteChat(stream RouteNote) returns (stream RouteNote) {}
  
  //初步设想：图片传输、大文件传输
  rpc CVImageStream(stream ImageMessage) returns (stream ImageMessage) {}
  
  //图像流传输 客户端要调用这个从服务端获取数据，服务端重写这个发送数据
  rpc CVMatImageStream(stream ImageStream) returns (stream ImageStream) {}
}


//图像传信息，包含命令和图像信息
message ImageMessage {
  //命令
  string Command = 1;

  //二进制数据 这样定义流数据不对，废弃不用
  //repeated bytes ImageStream= 2;
 
 //行数
 int32 row = 2;
 //列数
 int32 colum = 3;  
 //类型
 int32 type = 4;

  //状态码
  int32 channel = 5;
}

//图像传输流，单个像素的信息，三通道或四通道
message Chunk{
  int32 pic_data0 = 1;
  int32 pic_data1 = 2;
  int32 pic_data2 = 3;
  int32 pic_data3 = 4;
}

//真正的图像流数据，也就是一行数据
message ImageStream{
  repeated Chunk LineData = 1;
  ImageMessage ImgData = 2;
}
