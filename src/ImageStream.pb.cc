// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ImageStream.proto

#include "ImageStream.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace CVServer {
constexpr ImageMessage::ImageMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : imagestream_()
  , command_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , row_(PROTOBUF_LONGLONG(0))
  , colum_(PROTOBUF_LONGLONG(0))
  , state_(PROTOBUF_LONGLONG(0)){}
struct ImageMessageDefaultTypeInternal {
  constexpr ImageMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ImageMessageDefaultTypeInternal() {}
  union {
    ImageMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ImageMessageDefaultTypeInternal _ImageMessage_default_instance_;
}  // namespace CVServer
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_ImageStream_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_ImageStream_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_ImageStream_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_ImageStream_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CVServer::ImageMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CVServer::ImageMessage, command_),
  PROTOBUF_FIELD_OFFSET(::CVServer::ImageMessage, imagestream_),
  PROTOBUF_FIELD_OFFSET(::CVServer::ImageMessage, row_),
  PROTOBUF_FIELD_OFFSET(::CVServer::ImageMessage, colum_),
  PROTOBUF_FIELD_OFFSET(::CVServer::ImageMessage, state_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::CVServer::ImageMessage)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::CVServer::_ImageMessage_default_instance_),
};

const char descriptor_table_protodef_ImageStream_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021ImageStream.proto\022\010CVServer\"_\n\014ImageMe"
  "ssage\022\017\n\007Command\030\001 \001(\t\022\023\n\013ImageStream\030\002 "
  "\003(\014\022\013\n\003row\030\003 \001(\003\022\r\n\005colum\030\004 \001(\003\022\r\n\005State"
  "\030\005 \001(\0032Q\n\010CVServer\022E\n\rCVImageStream\022\026.CV"
  "Server.ImageMessage\032\026.CVServer.ImageMess"
  "age\"\000(\0010\001B*\n\025io.grpc.examples.gateB\tGate"
  "ProtoP\001\242\002\003RTGb\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_ImageStream_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ImageStream_2eproto = {
  false, false, 261, descriptor_table_protodef_ImageStream_2eproto, "ImageStream.proto", 
  &descriptor_table_ImageStream_2eproto_once, nullptr, 0, 1,
  schemas, file_default_instances, TableStruct_ImageStream_2eproto::offsets,
  file_level_metadata_ImageStream_2eproto, file_level_enum_descriptors_ImageStream_2eproto, file_level_service_descriptors_ImageStream_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_ImageStream_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ImageStream_2eproto);
  return descriptor_table_ImageStream_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_ImageStream_2eproto(&descriptor_table_ImageStream_2eproto);
namespace CVServer {

// ===================================================================

class ImageMessage::_Internal {
 public:
};

ImageMessage::ImageMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  imagestream_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CVServer.ImageMessage)
}
ImageMessage::ImageMessage(const ImageMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      imagestream_(from.imagestream_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  command_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_command().empty()) {
    command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_command(), 
      GetArena());
  }
  ::memcpy(&row_, &from.row_,
    static_cast<size_t>(reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&row_)) + sizeof(state_));
  // @@protoc_insertion_point(copy_constructor:CVServer.ImageMessage)
}

void ImageMessage::SharedCtor() {
command_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&row_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&row_)) + sizeof(state_));
}

ImageMessage::~ImageMessage() {
  // @@protoc_insertion_point(destructor:CVServer.ImageMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ImageMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  command_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ImageMessage::ArenaDtor(void* object) {
  ImageMessage* _this = reinterpret_cast< ImageMessage* >(object);
  (void)_this;
}
void ImageMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ImageMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ImageMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:CVServer.ImageMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  imagestream_.Clear();
  command_.ClearToEmpty();
  ::memset(&row_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&row_)) + sizeof(state_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ImageMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string Command = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_command();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CVServer.ImageMessage.Command"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated bytes ImageStream = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_imagestream();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // int64 row = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          row_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 colum = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          colum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 State = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ImageMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CVServer.ImageMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string Command = 1;
  if (this->command().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_command().data(), static_cast<int>(this->_internal_command().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CVServer.ImageMessage.Command");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_command(), target);
  }

  // repeated bytes ImageStream = 2;
  for (int i = 0, n = this->_internal_imagestream_size(); i < n; i++) {
    const auto& s = this->_internal_imagestream(i);
    target = stream->WriteBytes(2, s, target);
  }

  // int64 row = 3;
  if (this->row() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_row(), target);
  }

  // int64 colum = 4;
  if (this->colum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_colum(), target);
  }

  // int64 State = 5;
  if (this->state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CVServer.ImageMessage)
  return target;
}

size_t ImageMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CVServer.ImageMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes ImageStream = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(imagestream_.size());
  for (int i = 0, n = imagestream_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      imagestream_.Get(i));
  }

  // string Command = 1;
  if (this->command().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_command());
  }

  // int64 row = 3;
  if (this->row() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_row());
  }

  // int64 colum = 4;
  if (this->colum() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_colum());
  }

  // int64 State = 5;
  if (this->state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_state());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ImageMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CVServer.ImageMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const ImageMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ImageMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CVServer.ImageMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CVServer.ImageMessage)
    MergeFrom(*source);
  }
}

void ImageMessage::MergeFrom(const ImageMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CVServer.ImageMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  imagestream_.MergeFrom(from.imagestream_);
  if (from.command().size() > 0) {
    _internal_set_command(from._internal_command());
  }
  if (from.row() != 0) {
    _internal_set_row(from._internal_row());
  }
  if (from.colum() != 0) {
    _internal_set_colum(from._internal_colum());
  }
  if (from.state() != 0) {
    _internal_set_state(from._internal_state());
  }
}

void ImageMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CVServer.ImageMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImageMessage::CopyFrom(const ImageMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CVServer.ImageMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageMessage::IsInitialized() const {
  return true;
}

void ImageMessage::InternalSwap(ImageMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  imagestream_.InternalSwap(&other->imagestream_);
  command_.Swap(&other->command_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ImageMessage, state_)
      + sizeof(ImageMessage::state_)
      - PROTOBUF_FIELD_OFFSET(ImageMessage, row_)>(
          reinterpret_cast<char*>(&row_),
          reinterpret_cast<char*>(&other->row_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ImageMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace CVServer
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CVServer::ImageMessage* Arena::CreateMaybeMessage< ::CVServer::ImageMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CVServer::ImageMessage >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
